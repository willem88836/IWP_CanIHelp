// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel Clear


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<float4> Path;
int PathCount = 0;	
RWTexture2D<float4> Result;
float4 Color;
int Iterations;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// HACK: find a better way to set a default max value.
	float minDistance = 1000000;

	for (int i = 0; i < PathCount - 1; i++)
	{
		float4 o = Path[i];
		float4 t = Path[i + 1];
		float2 p = id.xy;

		float v = abs((t.y - o.y) * p.x - (t.x - o.x) * p.y + (t.x * o.y) - (t.y * o.x));
		float d = sqrt((pow(t.y - o.y , 2) + pow(t.x - o.x, 2)));

		float distance = v / d;
		
		minDistance = clamp(minDistance, 0, distance);
	}

	// TODO: do something with the found distance.

	Result[id.xy] += Color / Iterations;
}

[numthreads(8,8,1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = float4(0, 0, 0, 0);
}
